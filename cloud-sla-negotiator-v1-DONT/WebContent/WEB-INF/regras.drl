package br.edu.ifpb.aleciano.regras;

import br.edu.ifpb.aleciano.entidades.AmazonContext;
import br.edu.ifpb.aleciano.entidades.EngineReq;
import br.edu.ifpb.aleciano.interfaces.Strategy;
import br.edu.ifpb.aleciano.interfaces.InteraProtocol;
import br.edu.ifpb.aleciano.entidades.estrategias.OnDemand;
import br.edu.ifpb.aleciano.entidades.estrategias.PriceMomentum;
import br.edu.ifpb.aleciano.entidades.estrategias.CostOptimization;
import br.edu.ifpb.aleciano.entidades.estrategias.MinimizeInterruption;
import br.edu.ifpb.aleciano.entidades.estrategias.ImmediateAndUnintAcess;
 
rule "Immediate Access for Short Duration"
	no-loop true
	lock-on-active 
	when
    	$context: AmazonContext( (immediateAccess == true) && (shortDuration == true) )
    	$strategy: Strategy(  );
    	$protocol: InteraProtocol(  );
      	//$eng : EngineReq();
     	// Avalia se já existe a estratégia na engine, caso sim, não insere novamente.
     	//eval($eng.strategyExists(br.edu.ifpb.aleciano.entidades.estrategias.OnDemand.class) == false)   
    then
    	//$eng.setProtocol(br.edu.ifpb.aleciano.entidades.protocolos.FixedPriceProto.class);
       	// $eng.setStrategy($context, br.edu.ifpb.aleciano.entidades.estrategias.OnDemand.class);
       	System.out.printf("\nInside ruels!");
       	$strategy = new br.edu.ifpb.aleciano.entidades.estrategias.OnDemand($context);
       	$protocol = new br.edu.ifpb.aleciano.entidades.protocolos.FixedPriceProto();
       	//$strategy.setContext($context)
       	//$protocol = proto;
        update($strategy);
        update($protocol);
                
end

rule "Uninterrupted Access with Minimum Cost"
    when
       $context: AmazonContext( (uninterruptedAccess == true) && (minimizeCost == true)  )
       $eng : EngineReq();
       eval($eng.strategyExists(br.edu.ifpb.aleciano.entidades.estrategias.MinimizeInterruption.class) == false)
   	then
   		$eng.setProtocol(br.edu.ifpb.aleciano.entidades.protocolos.SpotInstanceProto.class);
        $eng.setStrategy($context, br.edu.ifpb.aleciano.entidades.estrategias.MinimizeInterruption.class);
        update($eng);               
end

rule "Minimize Job completion time and costraint"
    when
       $context: AmazonContext( (minimizeCompletionTime == true) && (minimizeCost == true) )
       $eng : EngineReq();
       eval($eng.strategyExists(br.edu.ifpb.aleciano.entidades.estrategias.PriceMomentum.class) == false)
       
    then
    	$eng.setProtocol(br.edu.ifpb.aleciano.entidades.protocolos.SpotInstanceProto.class);
        $eng.setStrategy($context, br.edu.ifpb.aleciano.entidades.estrategias.PriceMomentum.class);
        update($eng);       
end

rule "Minimize Cost and Job completion Time not a constraint"
    when
       $context: AmazonContext( (shortDuration == true) && (minimizeCost == true) )
       $eng : EngineReq();
       eval($eng.strategyExists(br.edu.ifpb.aleciano.entidades.estrategias.CostOptimization.class) == false)
    then
    	$eng.setProtocol(br.edu.ifpb.aleciano.entidades.protocolos.SpotInstanceProto.class);
        $eng.setStrategy($context, br.edu.ifpb.aleciano.entidades.estrategias.CostOptimization.class);
        update($eng);      
end

rule "Immediate and Uninterrupted Acess"
	when
       $context: AmazonContext( (immediateAccess == true) && (uninterruptedAccess == true) )
       $eng : EngineReq();
       eval($eng.strategyExists(br.edu.ifpb.aleciano.entidades.estrategias.ImmediateAndUnintAcess.class) == false)
 	then
 		$eng.setProtocol(br.edu.ifpb.aleciano.entidades.protocolos.SpotInstanceProto.class);
       	$eng.setStrategy($context, br.edu.ifpb.aleciano.entidades.estrategias.ImmediateAndUnintAcess.class);
       	update($eng);
               
end
